import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProfile, fetchRepos } from './githubAPI';

const initialState = {
  value: null,
  status: 'idle',
};

export const getGithub = createAsyncThunk(
  'github/fetch',
  async (username, { rejectWithValue }) => {
    try {
      const profileResponse = await fetchProfile(username);
      const reposResponse = await fetchRepos(profileResponse.data.repos_url);
      return {
        profile: profileResponse.data,
        repos: reposResponse.data,
      }
    } catch (err) {
      if (!err.response) {
        throw err
      }

      return rejectWithValue(err.response.data.message)
    }
  }
);

export const githubSlice = createSlice({
  name: 'github',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getGithub.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getGithub.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      })
      .addCase(getGithub.rejected, (state, action) => {
        state.status = 'error';
        state.value = action.payload;
      })
  },
});

export const selectGithub = (state) => state.github;

export default githubSlice.reducer;
